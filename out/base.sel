;
; Let there be light! 
; https://en.wikipedia.org/wiki/Identity_function
;
(let Identity        (λ x x))

;
; Boolean Logic
;
(let True            (λ t (λ f t)))
(let False           (λ t (λ f f)))
(let ∧               (λ p (λ q ((p q) p))))
(let ∨               (λ p (λ q ((p p) q))))
(let ¬               (λ c ((c False) True)))
(let If              (λ c (λ t (λ f ((c t) f)))))

;
; The Y combinator, allowing recrusive definitions without "cheating" by using named functions.
;
;  λf· (λx· f (x x)) (λx· f (x x))
;
; "Discovered" (or "Invented", depends on the reader) by Haskell B. Curry,
; It truly one of the cuter Sudokus in Lambda Calculus.
;
; Once we are able to use recursion, there is nothing really stopping us from structuring complex algorithms.
;
(let Y         (λ f ((λ x (f (λ y ((x x) y)))) (λ x (f (λ y ((x x) y)))))))



;
; Real Numbers & Numerical Operations with Church Numerals
; See: https://en.wikipedia.org/wiki/Church_encoding#Church_numerals
;

(let 0               (λ f Identity))
(let Is-Zero         (λ n ((n (λ _ False)) True)))

(let Successor       (λ n (λ f (λ x (f ((n f) x))))))
(let Predecessor     (λ n (((Is-Zero n) 0) (λ f (λ x (((n (λ g (λ h (h (g f))))) (λ _ x)) (λ u u)))))))
(let +               (λ m (λ n ((n Successor) m))))
(let -               (λ m (λ n ((n Predecessor) m))))
(let *               (λ m (λ n (λ f (m (n f))))))
(let Power           (λ x (λ y (y x))))
(let Abs-Difference  (λ x (λ y ((+ ((- x) y)) ((- y) x)))))
(let /               (Y (λ f (λ m (λ n
                        ((((If (¬ ((≤ n) m)))
                            (λ _ 0))
                            (λ _ (Successor ((f ((- m) n)) n))))
                        ∅))))))

(let Mod             (Y (λ f (λ m (λ n
                        ((((If ((< m) n))
                            (λ _ m))
                            (λ _ ((f ((- m) n)) n)))
                        ∅))))))

(let Factorial       (Y (λ f (λ n
                        ((((If (Is-Zero n))
                            (λ _ 1))
                            (λ _ ((* n) (f (Predecessor n)))))
                        ∅)))))

(let GCD             (Y (λ f (λ a (λ b
                        ((((If (Is-Zero b))
                            (λ _ a))
                            (λ _ ((f b) ((Mod a) b))))
                        ∅))))))



(let <               (λ m (λ n (¬ ((≤ n) m)))))
(let ≤               (λ m (λ n (Is-Zero ((- m) n)))))
(let =               (λ m (λ n ((∧ ((≤ m) n)) ((≤ n) m)))))
(let ≠               (λ m (λ n ((∨ (¬ ((≤ m) n))) (¬ ((≤ n) m))))))
(let >               (λ m (λ n (¬ ((≤ m) n)))))
(let ≥               (λ m (λ n ((≤ n) m))))
(let ∅               (λ x True))
(let Is-Null         (λ l (λ h (True (λ d False)))))

(let 1               (Successor 0))
(let 2               (Successor 1))
(let 3               (Successor 2))
(let 4               (Successor 3))
(let 5               (Successor 4))
(let 6               (Successor 5))
(let 7               (Successor 6))
(let 8               (Successor 7))
(let 9               (Successor 8))
(let 10              (Successor 9))
(let 11              (Successor 10))
(let 12              (Successor 11))
(let 13              (Successor 12))
(let 14              (Successor 13))
(let 15              (Successor 14))
(let 16              (Successor 15))
(let 17              (Successor 16))
(let 18              (Successor 17))
(let 19              (Successor 18))
(let 20              (Successor 19))
(let 21              (Successor 20))
(let 22              (Successor 21))
(let 23              (Successor 22))
(let 24              (Successor 23))
(let 25              (Successor 24))
(let 26              (Successor 25))
(let 27              (Successor 26))
(let 28              (Successor 27))
(let 29              (Successor 28))
(let 30              (Successor 29))
(let 31              (Successor 30))
(let 32              (Successor 31))
(let 33              (Successor 32))
(let 34              (Successor 33))
(let 35              (Successor 34))
(let 36              (Successor 35))
(let 37              (Successor 36))
(let 38              (Successor 37))
(let 39              (Successor 38))
(let 40              (Successor 39))
(let 41              (Successor 40))
(let 42              (Successor 41))
(let 43              (Successor 42))
(let 44              (Successor 43))
(let 45              (Successor 44))
(let 46              (Successor 45))
(let 47              (Successor 46))
(let 48              (Successor 47))
(let 49              (Successor 48))
(let 50              (Successor 49))



; A pair is our first data-structure that can hold arbitary data.
; The implementation is quite clear, it simply accepts two values to "pack"
; and returns a function that could have a function applied that that would have those two values "unpacked" into.
(let Pair      (λ x (λ y (λ f ((f x) y)))))

; Helpers for returning the Left/Right side of the pair
(let Left      (λ p (p True)))
(let Right     (λ p (p False)))

; A Triple has a similar implementation to the Pair, but with 3 values instead.
(let Triple    (λ x (λ y (λ z (λ f (((f x) y) z))))))

;
; Linked Lists
;

; The List implemenation is simply using the Triple defined before to hold 3 references:
; A Value of the current Node
; The rest of the List
; A flag indicating is the list empty or not.
;
; Note the later is not exactly nessecery as we could have used a Null terminator in the value field
; and only use a pair for the implementation, but implementing using a Triple and a flag proved easier. 
(let List      (λ h (λ t (((Triple h) t) False))))
(let EmptyList (((Triple 0) 0) True))

; The head of the list is simple the left most part of the Triple
(let Head      (λ l (l (λ h (λ t (λ n h))))))

; The tail is the middle part of the Triple
(let Tail      (λ l (l (λ h (λ t (λ n t))))))

; Is-Empty is the flag in the right most part of the Triple.
(let Is-Empty  (λ l (l (λ h (λ t (λ n n))))))


; A show case of common algorithms using the Linked List implementation above and the Y combinator. 
(let Nth (Y (λ f (λ l (λ n
  ((((If (Is-Zero n))
   (λ _ (Head l)))
   (λ _ ((f (Tail l)) (Predecessor n))))
   ∅))))))

(let Fold (Y (λ f (λ l (λ m (λ a
  ((((If (Is-Empty l))
   (λ _ a))
   (λ _ (((f (Tail l)) m) ((m a) (Head l)))))
   ∅)))))))

(let MapRight (λ l (λ f (((Fold l) (λ nl (λ m ((List (f m)) nl)))) EmptyList))))
(let Reverse  (λ l ((MapRight l) Identity)))
(let Map      (λ l (λ f (Reverse ((MapRight l) f)))))
(let Length   (λ l (((Fold l) (λ len (λ _ (Successor len)))) 0)))

(let Filter (λ l (λ p
  (((Fold l) (λ acc (λ m
   ((((If (p m))
   (λ _ ((List m) acc)))
   (λ _ acc))
   ∅))))
  EmptyList))))


;
; Signed Integers
;

; Integer signs:
(let Positive True)
(let Negative False)

; An integer is just a pair of a sign an a real number
(let Integer ((λ sign (λ number ((Pair sign) number)))))

; For the sake of defintion, let's write down the definition of a Sign.
(let Sign ((∧ True) False))

; Helpers
(let Integer::⟶Sign (λ int (Left Int)))
(let Integer::⟶Real (λ int (Right int)))
(let Integer::Positive? (λ int ((∨ (Is-Zero (Integer::⟶Real int))) (Left int))))
(let Integer::Negative? (λ int (¬ (Integer::Positive? int))))
(let Integer::⟶PositiveInteger (λ int ((Integer Positive) (Right int))))

(let Integer::Successor (λ n
            (((Is-Zero (Integer::⟶Real n)) 
                ((Integer Positive) 1))
                (((Integer::Positive? n) ((Integer Positive) (Successor (Integer::⟶Real n))))
                                  ((Integer Negative) (Predecessor (Integer::⟶Real n)))))))

(let Integer::Predecessor (λ n
            (((Is-Zero (Integer::⟶Real n)) 
                ((Integer Negative) 1))
                (((Integer::Positive? n) ((Integer Positive) (Predecessor (Integer::⟶Real n))))
                                  ((Integer Negative) (Successor (Integer::⟶Real n))))))))



; Integer Operations
(let Integer::+  (λ m (λ n (((Integer::⟶Real n)
                            (((Integer::Positive? n) 
                                Integer::Successor)
                                Integer::Predecessor))
                            m))))

(let Integer::-  (λ m (λ n (((Integer::⟶Real n)
                            (((Integer::Positive? n) 
                                Integer::Predecessor)
                                Integer::Successor))
                            m))))


(let Integer::≥ (λ n (λ m
    ((((∧ (Integer::Positive? n)) (Integer::Negative? m)) ; When left is positive the result is always True
        True)
    ((((∧ (Integer::Positive? n)) (Integer::Positive? m)) ; When both are positive it's ≥ on the real values
        ((≥ (Integer::⟶Real n)) (Integer::⟶Real m)))
    ((((∧ (Integer::Negative? n)) (Integer::Negative? m)) ; When both are negative it's ≤ on the real values
        ((≤ (Integer::⟶Real n)) (Integer::⟶Real m)))
        False)))))) ; in any other case (i.e, left is negative and right is positive) the result is false


;
; A small helper to decide the sign of a product of two Integers.
;
(let Sign::* (λ m (λ n
    ((((∧ (Integer::Negative? n)) (Integer::Negative? m))
        Positive)
     ((((∨ (Integer::Negative? n)) (Integer::Negative? m))
        Negative)
        Positive)))))

; Multiplying Integers is simply a pair of the product of signs and product of reals.
(let Integer::* (λ m (λ n
    ((Integer 
        ((Sign::* m) n))
        ((* (Integer::⟶Real m)) (Integer::⟶Real n))))))


; Works only for two positive integers
(let Integer::RealValueDivision (Y (λ f (λ x (λ divisor
  ((((If ((Integer::≥ x) divisor))
   (λ _ (Integer::Successor ((f ((Integer::- x) divisor)) divisor))))
   (λ _ ((Integer Positive) 0)))
   ∅))))))

; Calculate the sign and the real value separetely and return in a new Integer
(let Integer::Division (λ n (λ m 
    ((Integer ((Sign::* n) m)) ; Same sign product rules apply for division as for multiplication
               (Integer::⟶Real ((Integer::RealValueDivision (Integer::⟶PositiveInteger n)) (Integer::⟶PositiveInteger m)))))))

; Only works on positive integers.
; If anyone has a good paper to reference me, or even better, explain me like I'm 5 how to calculate remainder of mixed signs in Lambda Calculus, LMK.
(let Integer::Remainder (Y (λ f (λ x (λ divisor
  ((((If ((Integer::≥ x) divisor))
   (λ _ ((f ((Integer::- x) divisor)) divisor)))
   (λ _ x))
   ∅))))))


