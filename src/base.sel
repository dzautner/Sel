(let Identity        (λ x x))

(let Successor       (λ n (λ f (λ x (f ((n f) x))))))
(let Predecessor     (λ n (((Is-Zero n) 0) (λ f (λ x (((n (λ g (λ h (h (g f))))) (λ _ x)) (λ u u)))))))
(let +               (λ m (λ n ((n Successor) m))))
(let -               (λ m (λ n ((n Predecessor) m))))
(let *               (λ m (λ n (λ f (m (n f))))))
(let Power           (λ x (λ y (y x))))
(let Abs-Difference  (λ x (λ y ((+ ((- x) y)) ((- y) x)))))

(let True            (λ t (λ f t)))
(let False           (λ t (λ f f)))
(let ∧               (λ p (λ q ((p q) p))))
(let ∨               (λ p (λ q ((p p) q))))
(let ¬               (λ c ((c False) True)))
(let If              (λ c (λ t (λ f ((c t) f)))))

(let Is-Zero         (λ n ((n (λ _ False)) True)))
(let <               (λ m (λ n (¬ ((≤ n) m)))))
(let ≤               (λ m (λ n (Is-Zero ((- m) n)))))
(let =               (λ m (λ n ((∧ ((≤ m) n)) ((≤ n) m)))))
(let ≠               (λ m (λ n ((∨ (¬ ((≤ m) n))) (¬ ((≤ n) m))))))
(let >               (λ m (λ n (¬ ((≤ m) n)))))
(let ≥               (λ m (λ n ((≤ n) m))))
(let ∅               (λ x True))
(let Is-Null (λ l (λ h (True (λ d False)))))

(let 0               (λ f Identity))
(let 1               (Successor 0))
(let 2               (Successor 1))
(let 3               (Successor 2))
(let 4               (Successor 3))
(let 5               (Successor 4))
(let 6               (Successor 5))
(let 7               (Successor 6))
(let 8               (Successor 7))
(let 9               (Successor 8))
(let 10              (Successor 9))

(let Y         (λ f ((λ x (f (λ y ((x x) y)))) (λ x (f (λ y ((x x) y)))))))

(let Pair      (λ x (λ y (λ f ((f x) y)))))
(let Left      (λ p (p True)))
(let Right     (λ p (p False)))

(let Triple    (λ x (λ y (λ z (λ f (((f x) y) z))))))
(let List      (λ h (λ t (((Triple h) t) False))))
(let EmptyList (((Triple 0) 0) True))
(let Head      (λ l (l (λ h (λ t (λ n h))))))
(let Tail      (λ l (l (λ h (λ t (λ n t))))))
(let Is-Empty  (λ l (l (λ h (λ t (λ n n))))))

(let Nth (Y (λ f (λ l (λ n
  ((((If (Is-Zero n))
   (λ _ (Head l)))
   (λ _ ((f (Tail l)) (Predecessor n))))
   ∅))))))

(let Fold (Y (λ f (λ l (λ m (λ a
  ((((If (Is-Empty l))
   (λ _ a))
   (λ _ (((f (Tail l)) m) ((m a) (Head l)))))
   ∅)))))))

(let MapRight (λ l (λ f (((Fold l) (λ nl (λ m ((List (f m)) nl)))) EmptyList))))
(let Reverse  (λ l ((MapRight l) Identity)))
(let Map      (λ l (λ f (Reverse ((MapRight l) f)))))
(let Length   (λ l (((Fold l) (λ len (λ _ (Successor len)))) 0)))

(let Filter (λ l (λ p
  (((Fold l) (λ acc (λ m
   ((((If (p m))
   (λ _ ((List m) acc)))
   (λ _ acc))
   ∅))))
  EmptyList))))
